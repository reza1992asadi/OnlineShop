what is routing? routing is when you want to get to different parts of your application with specific URLs, 
So far when ever you coded anything, all you did was to render everything on localhost:3000 and then you clicked
on different buttons of your app that got you to different places. But with this method you can type in a url 
that gets you to a specific page. which is cool, isn't it? 

first you need to import {BrowserRouter} from 'react-router-dom'; 
wrap you app in it. 
<BrowserRouter>
    <App /> 
<BrowserRouter> 

you build a folder where you keep your route level component. they are only used for routing. 

this is how to make your component routable: 

first you need to import {route,routes} from 'react-router-dom'; 

const App = () => {
  return (
    <Routes>
      <Route path='/' element= {<Home />} />
    </Routes>
);
};

now lets imagine you want to have a navbar on top which is fixed, and on bottom you are going to display the 
routes available to you. what are you going to do? here you need to use nested routes. 

route nesting is really not that difficult it might seem confusing at first, But its really not hard. just keep
mind that its a parent child relation that you should build. 
<Routes>
  <Route path='/' element={<Nav />}> 
    <Route path='shop' element={<shop />} /> 
  </Route>
</Routes>

we then use  <outlset /> whenever you need to show the rest of the Route. to be honest, I don't get it right now, 
but just memorize how it works. 


*we can use a fragment instead of a <div>. fragment is a react component, when we use fragment it actually 
renders to nothing, when it gets mounted on the dom. in react components must have a top level parent. when we
want to render nothing on to the dom then we can use fragment, so we have created a top level parent for our 
component, but at the same time nothing has been rendered to dom. I am not aware if this has any other benefits 
that we are not aware of. 
*you need to import it first in order to be able to use it. import {fragment} form 'react'; 

***********************************************************************************************
***********************************************************************************************
Firebase: 

for installing firebase on your system, just do yarn add firebase or npm install firebase 

to be able to use firebase in your project, you need to initialize it first in your program. in your 
source create a folder for example utils/firebase/firebase.utils.js in that you need to write: 

import {initializeApp} from 'firebase/app' 

* firebase is a suite of tools. you bring this suite from the library through a thing called app. 
for that you need the initializeapp function, this function will create an instance of app based off of 
some config. this config is an object that allows us to attach firebase app instance to the firbase 
instance that we have online. 

then on firebase website project, you choose web, choose a name and set up your firbase web instance online
then you  copy the config file and paste bellow is the import line. 

const firebaseConfig = {
  apiKey: "AIzaSyDHmjungxBz6bebJi7tjAIHDx3NkQACD44",
  authDomain: "crown-clothing-db-cd733.firebaseapp.com",
  projectId: "crown-clothing-db-cd733",
  storageBucket: "crown-clothing-db-cd733.firebasestorage.app",
  messagingSenderId: "850973645781",
  appId: "1:850973645781:web:a49aa77b934ee82d19fb5c"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);

this will be how it looks, as you can see, 

as said earlier, firbase suite has multiple features the next one that we want to imoprt depending on 
your needs is from 'firebase/auth' you get libraries such as getAuth, signinwithredirect, googlesignin
githubsignin and things such as that. 

inorder to use this google authintication method, first we need to initialize it. 
const provider = new GoogleAuthProvider(); then we call setcustom parameters on provider. so we can tell
our googleauth provider how we want it to behave. the main one that we want is select_account. 

the last two lines are the main part: here is an explanation from chatgpt: 

export const auth = getAuth() ; 
export const signInWithGooglePopup = () => signInWithPopup(auth, provider); 

Key Concepts

getAuth():

This is a function from Firebase's authentication module that initializes Firebase Authentication.
It returns an auth object that provides methods to sign in, sign out, and check the authentication state (like signInWithPopup and signInWithRedirect).

GoogleAuthProvider:

This is a class that represents the Google provider for Firebase Authentication.
It allows Firebase to use Google as an authentication method, so users can sign in with their Google accounts.
You create an instance of GoogleAuthProvider to configure Google sign-in settings (like forcing the user to select an account every time they sign in).

signInWithPopup():

This method is used to sign the user in through a popup.
It requires two things:
The auth object (which manages Firebase Authentication).
The provider (in this case, the GoogleAuthProvider), which tells Firebase that we want to use Google for authentication.

Putting It All Together
Firebase Authentication (auth) manages the user's authentication state.
Google Authentication (GoogleAuthProvider) specifies that Google will be used for authentication.
signInWithPopup(auth, provider) triggers the Google sign-in process using a popup window.
So yes, you're right: the code is using Firebase Authentication, the Google provider, and the popup method together to create a seamless Google sign-in process.

The signInWithGooglePopup function is just a convenient wrapper around signInWithPopup(auth, provider) to make it easier to use in your app.

*************************

FireStore database: is the actual database that we are going  to store our data in. in firestore data is stored as data in documents which are in collections. 

now for the database side we also need to import some libraries. you need getfirestore for initialization
doc to get the documents getdoc to get the data, setdoc to write data. So its going to look like this: 
import {getfirestore, doc, getDoc, setDoc} from 'firebase/firestore'

then we write export const db = getfirestore(); 
we export it so we can use the database elsewhere;


** there are a couple of things that I have learned that are super 
crucial with git. for example if you want to delete all the uncommited 
changes that you have made on your files and you have saved them on the
editor, you can use git reset --hard but this permanantly deletes the 
files. 

the more  interesting option that I have learnt is this  command that 
you can use to diregard the changes to a certain file. so the other 
files will keep the changes. you can use git checkout -- <file path> this 
is a very good option. 

**** a few  words about routes *****
yesterday I was thinking more about the routes in this project. and I 
managed to understand more of the problem. initially I assumed we only
use routes for whole pages and components for portions of the page. it 
is true, however there is no written rule and you can use whatever way
you think is more efficient for your project. for example in this project
you have a navbar which appears on  top of every page. so the trick used
here is to use nested routes  with the navbar route as the parent and 
as the base. 

const App = () => {
  return (
    <Routes>
      <Route path='/' element= {<Navigation />}>
        <Route index element= {<Home />} />
        <Route path='shop' element={<Shop />} />
        <Route path='signin' element={<SignIn />} />
      </Route>
    </Routes>
);

later when writing the navigation route(remember everything in react is 
a component) you layout the form of the navbar and at the end you include
<outlet /> when then the router library will pick up the line from it 
and will render the next components in place of the outlet, so the outlet
is like a placeholder for the rest of it(the children better to say).

const Navigation = () => { 
    return (
      <Fragment>
        <div className="navigation">
          <Link className="logo-container" to='/'>
            <CrwnLogo className="logo" />
          </Link>
          <div className="nav-links-container">
            <Link className='nav-link' to='/shop'>
              Shop
            </Link>  
            <Link className="signin-link" to='/signin'>
              Sign in 
            </Link>          
          </div>
        </div>
        <Outlet /> **** checkout the <outlet /> here !!!!
        </Fragment>
    );
  }; 
